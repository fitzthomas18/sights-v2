import numpy as np
import skimage

from components.sensor import Sensor, SensorConfig


class MLX90640SensorConfig(SensorConfig):
    address: int = 0x33
    interpolate: bool = False
    mock: bool = False


class MLX90640Sensor(Sensor):
    # Set width and height (static)
    width = 32
    height = 24

    def configure(self):
        if self.config.mock:
            return
        import seeed_mlx9064x
        # Additional config option for i2c address, default to 0x33
        self.address = self.config.address
        # Create sensor object
        self.sensor = seeed_mlx9064x.grove_mxl90640(address=self.address)
        self.sensor.refresh_rate = seeed_mlx9064x.RefreshRate.REFRESH_4_HZ

    def read(self):
        if self.config.mock:
            # Sample data
            frame = [24.4, 24.6, 24.8, 25.0, 25.2, 25.2, 25.1, 25.3, 25.1, 25.0, 24.8, 24.8, 24.7, 24.7, 24.7, 24.6, 24.6, 24.6, 24.6, 24.6, 24.6, 24.6, 24.6, 24.6, 24.8, 24.8, 24.9, 24.8, 24.9, 24.9, 25.0, 24.9, 23.5, 24.1, 24.4, 24.5, 24.5, 24.4, 24.4, 24.5, 24.4, 24.3, 24.3, 24.3, 24.1, 23.9, 23.9, 24.0, 24.1, 24.0, 23.8, 23.8, 23.9, 23.9, 24.0, 24.2, 24.3, 24.3, 24.3, 24.3, 24.2, 24.3, 24.3, 24.4, 22.2, 23.0, 23.6, 23.5, 23.4, 23.5, 23.5, 23.6, 23.4, 23.2, 23.2, 22.8, 22.6, 22.6, 22.6, 22.6, 22.6, 22.5, 22.5, 22.6, 22.5, 22.4, 22.6, 22.7, 22.9, 22.9, 22.9, 22.9, 23.1, 23.0, 23.1, 23.1, 21.2, 21.8, 22.1, 22.1, 22.2, 22.3, 22.3, 22.2, 22.0, 21.9, 21.9, 21.8, 21.5, 21.6, 21.6, 21.4, 21.3, 21.6, 21.6, 21.5, 21.7, 21.6, 21.6, 21.6, 21.6, 21.7, 21.9, 21.9, 21.8, 21.9, 22.0, 22.0, 20.4, 21.0, 21.3, 21.2, 21.2, 21.4, 21.3, 21.2, 21.1, 21.0, 21.0, 20.8, 20.6, 20.7, 17.0, 2.6, 16.9, 20.5, 20.7, 20.6, 20.6, 20.6, 20.7, 20.8, 20.7, 20.6, 20.9, 21.0, 20.9, 20.9, 21.1, 21.0, 19.3, 19.9, 20.2, 20.1, 20.2, 20.3, 20.3, 20.1, 19.9, 20.0, 20.0, 19.6, 19.8, 18.4, 8.8, 0.9, 12.9, 19.1, 19.7, 19.5, 19.4, 19.4, 19.6, 19.6, 19.5, 19.5, 19.8, 19.8, 19.6, 19.6, 20.0, 19.8, 18.2, 18.8, 19.2, 19.1, 18.9, 19.2, 19.3, 19.0, 18.6, 18.8, 18.8, 18.5, 18.1, 6.8, 0.9, 1.1, 15.6, 18.1, 18.3, 17.9, 17.9, 18.1, 18.4, 18.3, 18.2, 18.3, 18.4, 18.4, 18.2, 18.2, 18.7, 18.5, 16.7, 17.3, 17.7, 17.7, 17.4, 17.9, 17.8, 17.3, 17.1, 17.3, 17.2, 16.8, 15.8, 2.1, 1.0, 0.8, 8.9, 16.9, 16.8, 16.4, 16.4, 16.6, 16.7, 16.7, 16.6, 16.6, 17.0, 16.9, 16.8, 16.9, 17.4, 17.2, 14.9, 15.5, 15.8, 15.7, 15.5, 16.0, 16.2, 15.6, 15.5, 15.8, 15.7, 15.4, 14.5, 1.4, 0.0, 0.2, 2.7, 12.9, 15.0, 14.6, 14.7, 14.8, 15.1, 15.1, 15.2, 15.1, 15.4, 15.3, 15.2, 15.6, 15.9, 15.8, 12.5, 13.5, 13.8, 13.6, 13.6, 14.4, 14.4, 13.5, 13.7, 13.9, 13.8, 13.2, 12.5, 9.8, 0.7, 36.0, 1.8, 10.7, 13.2, 12.7, 12.7, 12.8, 13.0, 12.6, 12.7, 13.3, 13.7, 13.2, 13.0, 13.6, 14.1, 14.6, 12.0, 12.0, 12.1, 12.1, 12.0, 12.2, 12.2, 12.1, 12.1, 12.1, 12.1, 12.0, 12.1, 5.1, 0.8, 0.2, 6.2, 3.9, 12.0, 12.0, 12.0, 12.0, 12.0, 12.0, 12.0, 12.0, 12.0, 12.0, 12.0, 12.0, 12.7, 14.9, 12.0, 12.0, 12.0, 12.0, 12.0, 12.0, 12.0, 11.9, 12.0, 12.0, 12.0, 11.9, 12.0, 10.2, 0.0, 0.0, 6.1, 11.8, 12.0, 12.0, 12.0, 12.0, 12.0, 12.0, 12.0, 12.0, 12.0, 12.0, 12.0, 12.0, 12.0, 13.9, 11.9, 12.0, 11.9, 12.0, 12.0, 12.0, 12.0, 12.0, 12.0, 12.0, 12.0, 12.0, 12.0, 12.0, 1.9, 0.0, 8.1, 12.0, 12.0, 12.0, 12.0, 12.0, 11.9, 12.0, 12.0, 12.0, 12.0, 12.0, 12.0, 12.0, 12.1, 12.0, 12.0, 12.0, 12.0, 12.0, 12.0, 12.0, 12.0, 12.0, 12.0, 12.0, 12.0, 12.0, 12.1, 12.0, 4.4, 0.0, 7.8, 12.0, 12.0, 12.1, 12.0, 12.0, 12.0, 12.0, 12.0, 12.1, 12.0, 12.0, 12.0, 12.0, 12.0, 12.0, 9.3, 10.4, 11.4, 11.7, 11.8, 12.0, 11.9, 11.9, 12.0, 11.9, 11.8, 11.7, 11.9, 10.7, 0.2, 0.1, 7.9, 11.1, 11.6, 11.6, 12.0, 11.5, 11.7, 11.7, 11.2, 10.4, 11.6, 11.9, 12.0, 12.0, 12.0, 12.0, 7.2, 7.9, 8.8, 8.9, 8.9, 9.2, 9.0, 9.1, 9.0, 9.0, 9.1, 8.9, 9.1, 2.8, 0.7, 1.0, 7.4, 8.3, 8.5, 8.6, 9.0, 8.9, 8.5, 7.8, 5.1, 5.8, 8.7, 9.1, 11.0, 10.6, 10.4, 9.7, 6.0, 6.7, 7.1, 7.5, 7.7, 7.7, 7.4, 7.7, 7.8, 7.6, 7.5, 7.4, 7.3, 0.5, 1.5, 3.5, 7.2, 7.4, 7.4, 7.6, 7.7, 7.4, 7.4, 7.6, 7.6, 8.2, 8.6, 8.4, 10.2, 11.7, 10.4, 9.7, 4.7, 5.3, 5.6, 6.0, 6.1, 6.2, 6.3, 6.5, 6.5, 6.4, 6.4, 6.5, 6.5, 5.6, 4.5, 4.9, 6.8, 6.9, 7.1, 7.1, 7.2, 7.2, 7.5, 7.7, 8.1, 8.3, 9.0, 6.8, 8.5, 11.6, 10.2, 9.9, 4.3, 4.8, 5.3, 5.6, 5.7, 5.7, 6.2, 6.2, 6.3, 6.4, 6.4, 6.2, 6.6, 6.1, 6.4, 6.6, 6.8, 6.8, 6.8, 6.8, 6.9, 7.1, 7.4, 7.4, 7.7, 7.9, 7.6, 7.2, 8.0, 8.8, 9.0, 8.4, 4.4, 4.8, 5.4, 5.7, 5.9, 5.7, 6.1, 6.4, 6.5, 6.5, 6.3, 6.4, 6.6, 6.4, 6.2, 6.5, 6.7, 6.8, 6.7, 6.7, 7.1, 7.2, 7.2, 7.3, 7.3, 6.9, 4.9, 5.4, 7.3, 8.1, 8.2, 7.9, 4.3, 4.8, 5.4, 5.6, 5.8, 5.8, 6.1, 6.2, 6.4, 6.2, 6.2, 6.5, 6.5, 6.5, 6.3, 6.7, 7.0, 7.0, 7.0, 7.1, 7.1, 7.1, 7.0, 7.0, 7.3, 7.2, 6.1, 5.4, 7.0, 7.8, 8.1, 8.2, 3.8, 4.2, 5.1, 5.6, 5.8, 5.7, 5.9, 6.1, 6.1, 5.9, 6.0, 6.3, 6.4, 6.4, 6.3, 6.4, 6.7, 6.7, 6.6, 6.9, 7.0, 6.9, 6.9, 7.1, 7.1, 6.4, 6.1, 5.6, 6.7, 7.6, 8.1, 8.1, 3.6, 4.1, 5.0, 5.5, 5.6, 5.5, 5.7, 5.8, 5.9, 5.7, 6.0, 6.6, 6.5, 6.4, 6.2, 6.0, 6.2, 6.2, 5.9, 6.3, 6.3, 6.3, 6.4, 6.5, 6.2, 4.9, 5.1, 6.0, 6.1, 7.1, 7.4, 7.7, 3.2, 3.9, 4.7, 5.3, 5.6, 5.5, 5.7, 5.6, 5.6, 5.6, 6.1, 6.4, 6.0, 5.7, 5.4, 5.3, 5.6, 5.7, 5.6, 5.9, 5.9, 5.8, 5.9, 6.3, 5.2, 4.5, 4.1, 5.2, 6.3, 7.1, 7.3, 7.3]
        else:
            data = [0] * (self.width * self.height)
            self.sensor.getFrame(data)
            # Correct mirrored MLX90641 output.
            frame = []
            matrix = [data[i:i + self.width] for i in range(0, len(data), self.width)]
            for row in matrix:
                row.reverse()
                frame.extend(row)
        # Interpolate the frame (to 64 x 48) if enabled
        if self.config.interpolate:
            # Convert to Numpy array (2D)
            arr = np.reshape(frame, (self.height, self.width))
            # Rescale image 2x and then flatten again
            res = skimage.transform.rescale(arr, 2, preserve_range=True).flatten()
            return list(res)
        return frame
